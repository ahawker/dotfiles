#!/usr/bin/env sh
#
# Shell functions for running commands inside containers.
#
# See: https://github.com/ahawker/dockerfiles

DOCKER_RUN_IMAGE=""
DOCKER_RUN_ARGS=""

alpine() {
	_set_docker_run_image alpine "$DOCKERFILES_ALPINE_VERSION"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE
}

awscli() {
	_set_docker_run_image awscli "$DOCKERFILES_AWSCLI_VERSION"
	_set_docker_run_args aws "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--volume "$HOME/.aws:$HOME/.aws:ro" \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		--env "AWS_ACCESS_KEY_ID:$AWS_ACCESS_KEY_ID" \
		--env "AWS_SECRET_ACCESS_KEY:$AWS_SECRET_ACCESS_KEY" \
		--env "AWS_SESSION_TOKEN:$AWS_SESSION_TOKEN" \
		--env "AWS_DEFAULT_REGION:$AWS_DEFAULT_REGION" \
		--env "AWS_DEFAULT_OUTPUT:$AWS_DEFAULT_OUTPUT" \
		--env "AWS_PROFILE:$AWS_PROFILE" \
		--env "AWS_CA_BUNDLE:$AWS_CA_BUNDLE" \
		--env "AWS_SHARED_CREDENTIALS_FILE:$AWS_SHARED_CREDENTIALS_FILE" \
		--env "AWS_CONFIG_FILE:$AWS_CONFIG_FILE" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

cookiecutter() {
	_set_docker_run_image cookiecutter "$DOCKERFILES_COOKIECUTTER_VERSION"
	_set_docker_run_args cookiecutter "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

go() {
	_set_docker_run_image golang "$DOCKERFILES_GOLANG_VERSION"
	_set_docker_run_args go "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

gofmt() {
	_set_docker_run_image golang "$DOCKERFILES_GOLANG_VERSION"
	_set_docker_run_args gofmt "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

jre8() {
	_set_docker_run_image jre8 "$DOCKERFILES_JRE8_VERSION"
	_set_docker_run_args java "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

maven() {
	_set_docker_run_image maven "$DOCKERFILES_MAVEN_VERSION"
	_set_docker_run_args mvn "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

node() {
	_set_docker_run_image nodejs "$DOCKERFILES_NODEJS_VERSION"
	_set_docker_run_args node "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

npm() {
	_set_docker_run_image nodejs "$DOCKERFILES_NODEJS_VERSION"
	_set_docker_run_args npm "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

python2() {
	_set_docker_run_image python2 "$DOCKERFILES_PYTHON2_VERSION"
	_set_docker_run_args python "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

python3() {
	_set_docker_run_image python3 "$DOCKERFILES_PYTHON3_VERSION"
	_set_docker_run_args python3 "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

ruby24() {
	_set_docker_run_image ruby2.4 "$DOCKERFILES_RUBY_VERSION"
	_set_docker_run_args irb "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

scala() {
	_set_docker_run_image sbt "$DOCKERFILES_SCALA_VERSION"
	_set_docker_run_args scala "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

sbt() {
	_set_docker_run_image sbt "$DOCKERFILES_SBT_VERSION"
	_set_docker_run_args sbt "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

shellcheck() {
	_set_docker_run_image shellcheck "$DOCKERFILES_SHELLCHECK_VERSION"
	_set_docker_run_args shellcheck "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

terraform() {
	_set_docker_run_image terraform "$DOCKERFILES_TERRAFORM_VERSION"
	_set_docker_run_args terraform "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--volume "$HOME/.aws:$HOME/.aws:ro" \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		--env "AWS_ACCESS_KEY_ID:$AWS_ACCESS_KEY_ID" \
		--env "AWS_SECRET_ACCESS_KEY:$AWS_SECRET_ACCESS_KEY" \
		--env "AWS_SESSION_TOKEN:$AWS_SESSION_TOKEN" \
		--env "AWS_DEFAULT_REGION:$AWS_DEFAULT_REGION" \
		--env "AWS_DEFAULT_OUTPUT:$AWS_DEFAULT_OUTPUT" \
		--env "AWS_PROFILE:$AWS_PROFILE" \
		--env "AWS_CA_BUNDLE:$AWS_CA_BUNDLE" \
		--env "AWS_SHARED_CREDENTIALS_FILE:$AWS_SHARED_CREDENTIALS_FILE" \
		--env "AWS_CONFIG_FILE:$AWS_CONFIG_FILE" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

travis() {
	_set_docker_run_image travis "$DOCKERFILES_TRAVIS_VERSION"
	_set_docker_run_args travis "$@"
	docker run \
		--interactive \
		--tty \
		--rm \
		--env-file "$DOCKERFILES_ENV_FILE" \
		--volume "$(pwd):$DOCKERFILES_WORKDIR" \
		--workdir "$DOCKERFILES_WORKDIR" \
		$DOCKER_RUN_IMAGE $DOCKER_RUN_ARGS
}

_set_docker_run_args() {
	# shellcheck disable=2039
	if [ "$2" = "$DOCKERFILES_DEFAULT_CMD" ]; then DOCKER_RUN_ARGS=(); else DOCKER_RUN_ARGS=("$@"); fi
}

_set_docker_run_image() {
	repo="${DOCKERFILES_REPO?:Unable to determine dockerfiles repo from environment}"
	image="${1?:Unable to determine dockerfiles image from environment}"
	version="${2?:Unable to determine dockerfiles image version from environment}"
	tag="${3:-${DOCKERFILES_TAG:-${DOCKERFILES_BUILD_ID:-${DOCKERFILES_BUILD_TS:-${DOCKERFILES_COMMIT:-${version?:Unable to determine dockerfiles tag from environment}}}}}}"
	DOCKER_RUN_IMAGE="$repo/$image-$version:$tag"
}

_set_aliases_for_image() {
	IMAGE="$1"
	EXECUTABLE="$2"
	VERSIONS=("${@:3}")

	# Default Command (shell)
	alias "$EXECUTABLE-shell"="$EXECUTABLE $DOCKERFILES_DEFAULT_CMD"

	# Latest
	alias "$EXECUTABLE-latest"="DOCKERFILES_TAG=latest $EXECUTABLE"
	alias "$EXECUTABLE-latest-shell"="$EXECUTABLE-latest"

	for VERSION in $VERSIONS
	do
		# Version
		alias "$EXECUTABLE-$VERSION"="IMAGE_VERSION=$VERSION $EXECUTABLE"
		alias "$EXECUTABLE-$VERSION-shell"="$EXECUTABLE-$VERSION $DOCKERFILES_DEFAULT_CMD"

		# Latest
		alias "$EXECUTABLE-$VERSION-latest"="IMAGE_VERSION=$VERSION $EXECUTABLE"
		alias "$EXECUTABLE-$VERSION-latest-shell"="$EXECUTABLE-$VERSION $DOCKERFILES_DEFAULT_CMD"

		# Tag
		if [ -n "$DOCKERFILES_TAG" ]; then
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_TAG"="IMAGE_TAG=$DOCKERFILES_TAG $EXECUTABLE-$VERSION"
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_TAG-shell"="$EXECUTABLE-$VERSION-$DOCKERFILES_TAG $DOCKERFILES_DEFAULT_CMD"
		fi

		# Build ID
		if [ -n "$DOCKERFILES_BUILD_ID" ]; then
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_ID"="IMAGE_TAG=$DOCKERFILES_BUILD_ID $EXECUTABLE-$VERSION"
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_ID-shell"="$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_ID $DOCKERFILES_DEFAULT_CMD"
		fi

		# Build TS
		if [ -n "$DOCKERFILES_BUILD_TS" ]; then
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_TS"="IMAGE_TAG=$DOCKERFILES_BUILD_TS $EXECUTABLE-$VERSION"
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_TS-shell"="$EXECUTABLE-$VERSION-$DOCKERFILES_BUILD_TS $DOCKERFILES_DEFAULT_CMD"
		fi

		# Commit Hash
		if [ -n "$DOCKERFILES_COMMIT" ]; then
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_COMMIT"="IMAGE_TAG=$DOCKERFILES_COMMIT $EXECUTABLE-$VERSION"
			alias "$EXECUTABLE-$VERSION-$DOCKERFILES_COMMIT-shell"="$EXECUTABLE-$VERSION-$DOCKERFILES_COMMIT $DOCKERFILES_DEFAULT_CMD"
		fi
	done

	unset VERSION
	unset IMAGE
	unset EXECUTABLE
	unset VERSIONS
}

# Source all image files into the current shell.
for f in $(find "$HOME/.dockerfiles/images" -type f 2> /dev/null); do . "$f"; done
